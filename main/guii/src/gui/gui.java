/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


//import gui.db_connector;
import gui.query;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author demon
 */

public class gui extends javax.swing.JPanel  {
    
    
        

    /**
     * Creates new form 
     */
    public gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jButton1.setText("show all data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("show data only scheduled classes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("show data only not schduled classes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("show only java classes");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("show only operating system classes");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("show only daa classes");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("show only computer graphic classes");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "date", "class", "scheedule", "type"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:

//            query.showalldata();
            
            Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="select * from classes ";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
            
            
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
//      System.out.println("hello");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

//            query.showdataonlyscheduledclasses();
            
             Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="SELECT * FROM `classes` where schedule=1";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
                        
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

//            query.showdataonlynotschduledclasses();
            
            
             Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="SELECT * FROM `classes` where schedule=0";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
                        
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

//            query.showonlyjavaclasses();
            
             Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="select * from classes where class='java'";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

//            query.showonlyoperatingsystemclasses();
            
             Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="select * from classes where class='os'";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

//            query.showonlydaaclasses();
            
             Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="select * from classes where class='daa'";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
                        
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

//            query.showonlycomputergraphicclasses();
            
            
             Statement st=db_connector.Connect().createStatement();
		st.executeQuery("use calendar");
        String query="select * from classes where class='gc'";
			ResultSet rs=st.executeQuery(query);
                        DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
                        tm.setRowCount(0);
			while (rs.next())
			{
                            Object o[]={rs.getDate("date"),rs.getString("class"),rs.getInt("schedule"),rs.getString("type")};
                            tm.addRow(o);
//				Date dateofschedule=rs.getDate("date");
//				String classs=rs.getString("class");
//				int schedule=rs.getInt("schedule");
//				System.out.format("%s, %s, %s\n", dateofschedule , classs, schedule);
			}
                        
        } catch (SQLException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    
    public static void  guimain() throws NullPointerException {
        JFrame f = new JFrame("frame");
        f.setSize(300, 300);
        f.setContentPane(new gui());

        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.pack();
        f.setVisible(true);

}
}